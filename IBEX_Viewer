#! /usr/bin/env python3

import sys, pdb, numpy as np, os
from tkinter import filedialog
from tkinter import *
from tkinter.ttk import Separator
from PIL import Image, ImageTk
from ibex import IBEX
import colortools as ct
from matplotlib.figure import Figure
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

class Application(Frame):

    def update2D(self):
        f = (1023*self.current_var).astype('u2')
        e = (1023*self.current_err).astype('u2')
        rgb = (255*self.TwoDCmap[f,e]).astype('u1')
        img = Image.fromarray(rgb).resize((720,360))
        tkimg = ImageTk.PhotoImage(img)
        self.resultImage.configure(image=tkimg, height=360, width=720)
        self.resultImage.image = tkimg

    def selectDataset(self, a):
        ds = self.currentDataset.get()
        indx = self.ibx.names.index(ds)
        self.Update(indx)

    def next(self):
        if self.current_index == (len(self.ibx.names)-1):
          self.Update(0)
        else:
          self.Update(self.current_index + 1)

    def prev(self):
        if self.current_index == 0:
          self.Update(len(self.ibx.names)-1)
        else:
          self.Update(self.current_index - 1)

    def update1D(self, v, label, cmap):
        iv = (255*v).astype('u2')
        cv = (255*cmap[iv]).astype('u1')
        img = Image.fromarray(cv).resize((540,270))
        tkimg = ImageTk.PhotoImage(img)
        label.configure(image=tkimg, height=270, width=540)
        label.image = tkimg

    def Update(self, indx):
        self.current_index = indx
        self.currentDataset.set(ibx.names[indx])
        n,varnames,vardata = self.ibx.GetByIndex(indx)
        var = vardata[varnames.index(self.varname)]
        err = vardata[varnames.index(self.errname)]
        self.current_var = (var - np.min(var)) / (np.max(var) - np.min(var))
        # self.current_err = (err - np.min(err)) / (np.max(err) - np.min(err))
        self.current_err = err
        self.update1D(self.current_var, self.varImage, self.varCmap)
        self.update1D(self.current_err, self.errImage, self.errCmap)
        self.update2D()
        self.updateHistos()

    def ChooseVarCmap(self):
        filename = filedialog.askopenfilename(initialdir=os.getcwd(),
                        title = "Select a colormap",
                        filetypes = (("1D map files", "*.csv *.json *.xml"), ("all files", "*.*")))
        self.varCmapWidget.configure(text=filename)
        self.varCmap = ct.load_colormap(filename)
        self.update1D(self.current_var, self.varImage, self.varCmap)

    def Choose2DCmap(self):
        filename = filedialog.askopenfilename(initialdir = os.getcwd(),
                        title = "Select a colormap",
                        filetypes = (("2D map files", "*.cmap2D"), ("all files", "*.*")))
        self.TwoDCmap = ct.ReadColormap2D(filename)
        self.TwoDCmapName = filename.split('/')[-1].split('.')[0]
        self.TwoDCmapWidget.configure(text=filename)
        self.update2DCmap()
        self.update2D()

    def update2DCmap(self):
        rgb = (255*self.TwoDCmap).astype('u1')
        img = Image.fromarray(np.flip(rgb, axis=0)).resize((256,256))
        tkimg = ImageTk.PhotoImage(img)
        self.cmap2D_image.configure(image=tkimg, height=256, width=256)
        self.cmap2D_image.image = tkimg

    def Save(self):
        f = (1023*self.current_var).astype('u2')
        e = (1023*self.current_err).astype('u2')
        rgb = (255*self.TwoDCmap[f,e]).astype('u1')
        img = Image.fromarray(rgb)
        img.save('%s-%s.png' % (self.currentDataset.get(), self.TwoDCmapName))
        
    def SaveAll(self):
        for i in range(len(self.ibx.names)):
          n,f,e = self.ibx.GetByIndex(i)
          f = (1023*f).astype('u2')
          e = (1023*e).astype('u2')
          rgb = (255*self.TwoDCmap[f,e]).astype('u1')
          img = Image.fromarray(rgb)
          img.save('%s-%s.png' % (n, self.TwoDCmapName))
        print('Save All')
        
    def Quit(self):
        print('Quit')

    def ChooseErrorCmap(self):
        filename = filedialog.askopenfilename(initialdir = os.getcwd(),
                        title = "Select a colormap",
                        filetypes = (("1D map files", "*.csv *.json *.xml"), ("all files", "*.*")))
        self.errCmapWidget.configure(text=filename)
        self.errCmap = ct.load_colormap(filename)
        self.update1D(self.current_err, self.errImage, self.errCmap)

    def Setup(self):
        self.grid()
        self.master.title("IBEX Viewer")

        title0 = Label(self.master, text="Normalized %s" % self.varname).grid(row=0, column=0, columnspan=2)

        self.varImage = Label(self.master)
        self.varImage.grid(row=1, column=0, columnspan=2)

        f = Frame(self.master)
        f.grid(row=2, column=0, columnspan=2, sticky='ewns')

        a = Label(f, text='1D Colormap: ').pack(side=LEFT)

        self.varCmapWidget = Label(f, text='GreyScale')
        self.varCmapWidget.pack(side=LEFT)

        b = Button(f, text="...", command=self.ChooseVarCmap)
        b.pack(side=LEFT)

        hgap = Separator(self.master, orient='horizontal').grid(row=3, column=0, columnspan=2, sticky='ew')

        title1 = Label(self.master, text="%s" % self.errname).grid(row=4, column=0, columnspan=2)

        self.errImage = Label(self.master)
        self.errImage.grid(row=6, column=0, columnspan=2)

        f = Frame(self.master)
        f.grid(row=7, column=0, columnspan=2, sticky='ewns')

        a = Label(f, text='1D Colormap: ').pack(side=LEFT)

        self.errCmapWidget = Label(f, text='GreyScale')
        self.errCmapWidget.pack(side=LEFT)

        b = Button(f, text="...", command=self.ChooseErrorCmap)
        b.pack(side=LEFT)

        vgap = Separator(self.master, orient='vertical').grid(row=0, rowspan=6, column=3, sticky='ns')

        ResultFrame = Frame(self.master)
        ResultFrame.grid(row=0, column=4, rowspan = 8, columnspan = 3, sticky='ewns')

        upper = Frame(ResultFrame)
        upper.grid(row=0, column=4, rowspan=4, columnspan=3, sticky='ewns')

        t1 = Label(upper, text="Result")
        t1.pack(side=TOP)

        self.resultImage = Label(upper)
        self.resultImage.pack(side=TOP)

        f = Frame(upper)
        f.pack(side=TOP)

        a = Label(f, text='2D Colormap: ')
        a.pack(side=LEFT)

        self.TwoDCmapWidget = Label(f, text='GrayScale')
        self.TwoDCmapWidget.pack(side=LEFT)

        b = Button(f, text="...", command=self.Choose2DCmap)
        b.pack(side=LEFT)

        lowerRightFrame = Frame(ResultFrame, height=256)
        lowerRightFrame.grid(row=5, column=4, rowspan=4, columnspan=4, sticky='nsew')

        self.histoFrame = Frame(lowerRightFrame, width=464, height=256)
        self.histoFrame.pack(side=LEFT)

        cmapFrame = Frame(lowerRightFrame, bg='cyan', width=256, height=256)
        cmapFrame.pack(side=RIGHT, padx=2)

        self.cmap2D_image = Label(cmapFrame, bg='gray')
        self.cmap2D_image.pack(side=TOP)

        hgap = Separator(self.master, orient='horizontal')
        hgap.grid(row=9, column=0, columnspan=10, sticky='ew')

        bottombox = Frame(self.master)
        bottombox.grid(row=10, column=0, columnspan=6, sticky='ewns')
        Label(bottombox, text="Dataset Name").pack(side=LEFT)

        self.currentDataset = StringVar()
        self.currentDataset.set(ibx.names[0])

        drop = OptionMenu(bottombox, self.currentDataset, *ibx.names, command=self.selectDataset)
        drop.pack(side=LEFT)

        nxt = Button(bottombox, text='Next', command=self.next)
        nxt.pack(side=LEFT)

        prv = Button(bottombox, text='Prev', command=self.prev)
        prv.pack(side=LEFT)

        menubar = Menu(self.master)
        filemenu = Menu(menubar)
        menubar.add_cascade(label='File', menu=filemenu)
        filemenu.add_command(label='Save', command=self.Save)
        filemenu.add_command(label='Save All', command=self.SaveAll)
        filemenu.add_command(label='Quit', command=self.Quit)
        self.master.config(menu=menubar)

        self.fig = Figure(figsize = (4.5, 2.5))
        self.fig.subplots_adjust(left=0.2,
                    bottom=0.1,
                    right=0.8,
                    top=0.9,
                    wspace=0.4,
                    hspace=0.4)
        self.var_histo_plot1 = self.fig.add_subplot(211)
        self.err_histo_plot1 = self.fig.add_subplot(212)
        self.histo_canvas = FigureCanvasTkAgg(self.fig, self.histoFrame)
        self.histo_canvas._tkcanvas.pack(fill=BOTH)
        self.histoFrame.pack(fill=BOTH)

    def updateHistos(self):
        self.var_histo_plot1.clear()
        self.var_histo_plot1.hist(self.current_var.flatten(), bins=30)
        self.err_histo_plot1.clear()
        self.err_histo_plot1.hist(self.current_err.flatten(), bins=30)
        self.histo_canvas.draw()

    def __init__(self, ibx, varname, errname):
        self.master = Tk()
        self.ibx = ibx
        Frame.__init__(self, self.master)
        self.varname = varname
        self.errname = errname
        self.Setup()
        r = np.arange(256)/255.0
        self.varCmap = np.column_stack([r]*3)
        self.errCmap = np.column_stack([r]*3)
        r = np.arange(1024)/1023.0
        self.TwoDCmap = np.column_stack([r]*(3*1024))
        self.TwoDCmapName = 'grayscale'
        self.update2DCmap()
        self.Update(0)
        
if len(sys.argv) != 4:
  print('syntax: %s data.ibx varname errname' % sys.argv[0])
  sys.exit(0)

ibx = IBEX.Read(sys.argv[1])

app = Application(ibx, sys.argv[2], sys.argv[3])
app.mainloop()
